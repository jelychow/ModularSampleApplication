apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.alibaba.arouter'

kapt {
    arguments {
        arg("moduleName", project.getName())
    }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileOptions.encoding = "UTF-8"
    defaultConfig {
        applicationId rootProject.android.applicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.android.versionCode
        versionName rootProject.android.versionName
        multiDexEnabled true
        signingConfig signingConfigs.debug

//        javaCompileOptions {
//            annotationProcessorOptions {
//                arguments = [moduleName: project.getName()]
//            }
//        }
////
//        ndk {
//            //设置支持的SO库架构
//            abiFilters 'armeabi' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
//        }
//        manifestPlaceholders = [UMENG_CHANNEL_VALUE: "baiduapp",]

//        javaCompileOptions {
//            annotationProcessorOptions {
//                arguments = [ moduleName : project.getName() ]
//            }
//        }
    }

    dexOptions {
        dexInProcess true
        preDexLibraries true
        javaMaxHeapSize "4g"//越大越好
        incremental true
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }




    aaptOptions {
        cruncherEnabled = false
        ignoreAssetsPattern "!.svn:!.git:!.ds_store:!*.scc:.*:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"
    }
    dexOptions {
        preDexLibraries = false
        jumboMode = false
        javaMaxHeapSize "4g"
    }




    buildTypes {
        debug {
            // 显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }

        release {
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'


        }
    }


    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    task printVariantNames() {
        doLast {
            android.applicationVariants.all { variant ->
                println variant.name
            }
        }
    }


    lintOptions {
        abortOnError false
    }


    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'

        exclude 'META-INFTICE.txt'
        exclude 'META-INF/maven/data.domybox.com/data.sdk/pom.properties'
        exclude 'META-INF/maven/data.domybox.com/data.sdk/pom.xml'
    }

}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    implementation rootProject.ext.dependencies.routerapi
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    kapt 'com.alibaba:arouter-compiler:1.1.4'
    implementation "org.jetbrains.anko:anko:$anko_version"
    implementation project(':sdklib')
    implementation project(':loginLib')

    if (isModular.toBoolean()) {

    } else {
        implementation project(':moduleA')
        implementation project(':moduleB')

    }
}
